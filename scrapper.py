from selenium import webdriver
from selenium.webdriver.support.ui import Select
from bs4 import BeautifulSoup
import requests as req

'''–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–∫—Ä–∞–ø–ø–∏—Ç –∫–Ω–∏–≥–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–≤–º–æ–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–π –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ Scrapper'''


class Book:
    def __init__(self, describtion, libraries=[]):
        assert isinstance(describtion, str)

        self.describtion = self.__prepare(describtion)
        self.libraries = list(map(self.__prepare, libraries))

    def __prepare(self, st):
        if 'ISBN' in st:
            st = st[st.index('.') + 1:st.index('ISBN')+22]
        elif '—ç–∫–∑.' in st:
            st = st[st.index('.') + 1:st.index('—ç–∫–∑.')+4]
        while '  ' in st:
            st = st.replace('  ', ' ')
        if '(1)' in st:
            st = st.replace('(1)', '')
        while '..' in st:
            st = st.replace('..', '.')
        if '–î–µ—Ä–∂' in st:
            st = st[: st.find('–î–µ—Ä–∂')]
        if '–°–æ–¥–µ—Ä–∂' in st:
            st = st[:st.find('–°–æ–¥–µ—Ä–∂')]
        if '–†—É–±—Ä–∏–∫' in st:
            st = st[:st.find('–†—É–±—Ä–∏–∫')]
        if '–ö–ª.—Å–ª–æ–≤–∞' in st:
            st = st[:st.find('–ö–ª.—Å–ª–æ–≤–∞')]

        return st

    # def show(self):
    #     print(self.describtion, *self.libraries, sep='\n', end='\n\n')

    def to_str(self):
        string = self.describtion + '\n' + '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏:' + '\n'
        for lib in self.libraries:
            string += 'üî∏' + lib + '\n'
        return string


class Scrapper:
    '''–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥ —Ñ—É–Ω–∫—Ü–∏–∏:
    find_books(req_str) - –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞ Book, 
                            —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–Ω–∏–≥–∏ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ 
    find_next() - –ø–µ—Ä–µ–π–¥–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ
    '''
    events = []
    source = ''
    num_books = 0

    def __init__(self, book_url):
        '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±–¥—Ä–∞–π–≤–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω—É–∂–Ω–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ; –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞'''
        self.driver = webdriver.Chrome()
        self.driver.get(book_url)
        submit_button = self.driver.find_element_by_css_selector(
            '[value="–í–æ–π—Ç–∏ –∫–∞–∫ –ì–æ—Å—Ç—å"]')
        submit_button.click()
        select = Select(
            self.driver.find_element_by_css_selector('[name="I21DBN"]'))
        select.select_by_visible_text('–û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥')
        self.driver.find_element_by_css_selector(
            '#ctrl_toggleExtendedSearchFields_text').click()
        select = Select(self.driver.find_element_by_name('A34_main'))
        select.select_by_visible_text('–ö–Ω–∏–≥–∏ –≤ —Ü–µ–ª–æ–º')

    def find_books(self, req_str):
        '''return Book[], init self.source with first page source'''
        search = self.driver.find_element_by_css_selector('#SEARCH_STRING')
        search.send_keys(req_str)
        self.driver.find_element_by_name('C21COM1').click()
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–∏–≥–∏
        try:
            notFound = self.driver.find_element_by_css_selector(
                'td[colspan="4"]')
        except ValueError:
            pass
        if notFound.text[:48] == '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:':
            return None
        else:
            self.source = self.driver.page_source
            books = self.__get_books_from_page()

            return books

    def find_next(self):
        if self.__go_next_page():
            books = self.__get_books_from_page()
            return books
        else:
            return []

    def __get_books_from_page(self):
        soup = BeautifulSoup(self.source, 'html.parser')
        books = []
        tables = soup.find_all(
            'table', attrs={'style': 'width:100%;border:1px;font-size:11px;'})
        for note in tables:
            note = note.text
            places = []
            if '–í—Å–µ–≥–æ:' in note:
                places = note[note.index(
                    '–í—Å–µ–≥–æ:')+10:note.index('–°–≤–æ–±–æ–¥–Ω—ã')].split(', ')
            books.append(Book(note, places))
        if len(books) > 0:
            return books
        return None

    def __go_next_page(self):                         # –∑–¥–µ—Å—å —Å–æ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö
        navbar = self.driver.find_elements_by_class_name('portion')
        if len(navbar) == 0:                # –µ—Å–ª–∏ –Ω–∞–≤–±–∞—Ä–∞ –Ω–µ—Ç, —Ç–æ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            return False
        for navElem in navbar:
            if navElem.text == '–°–ª–µ–¥—É—é—â–∞—è':
                navElem.click()
                self.source = self.driver.page_source
                return True
        return False

    def __del__(self):
        self.driver.close()
    
    def close(self):
        self.driver.close()
