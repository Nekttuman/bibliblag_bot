import telebot
from telebot import types
import config
import msg
from scrapper import Scrapper
# from librarian_bot import send_real_time_req
from paginator import Paginator
from db.db_worker import db_worker
import pickledb

bot = telebot.TeleBot(config.U_BOT_TOKEN)
pgt = ''
scr = ''

statesdb = pickledb.load('readers_states.db', False) 

def create_libraries_markup_from_list(libs):
    mrkp = types.InlineKeyboardMarkup()
    l = []
    for lib in libs:
        while '\n' in lib:
            lib = lib.replace('\n', '')
        while ' ' in lib:
            lib = lib.replace(' ','')
        while '(' in lib:
            lib = lib[:lib.index('(')]
        l.append(lib)

        if lib == '–∏–º.–ë.–ú–∞—à—É–∫–∞–í–∑—Ä–æ—Å–ª–æ–µ–æ—Ç–¥–µ–ª–µ–Ω–∏–µ':
            mrkp.add(types.InlineKeyboardButton('–∏–º. –ë. –ú–∞—à—É–∫–∞ (–ò–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∞—è, 10/1)', callback_data='lib_mashuk'))
        if lib == '–ë–ò–¶':
            pass
            # mrkp.add(types.InlineKeyboardButton('–∏–º. –ë. –ú–∞—à—É–∫–∞ (–ò–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∞—è 10/1)', callback_data='back_to_list'))
        if lib == '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è':
            mrkp.add(types.InlineKeyboardButton('–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è (–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∞—è, 128)', callback_data='lib_central'))
        if lib == '–î–∏–∞–ª–æ–≥':
            mrkp.add(types.InlineKeyboardButton('–î–∏–∞–ª–æ–≥ (–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è, 46)', callback_data='lib_dialog'))
        if lib == '–°–æ–ª–Ω–µ—á–Ω–∞—è':
            mrkp.add(types.InlineKeyboardButton('–°–æ–ª–Ω–µ—á–Ω–∞—è (–ü–æ–≥—Ä–∞–Ω–∏—á–Ω–∞—è, 124/3)', callback_data='lib_sun'))
        if lib == '–ü–ª–æ–¥–æ–ø–∏—Ç–æ–º–Ω–∏–∫':
            mrkp.add(types.InlineKeyboardButton('–ü–ª–æ–¥–æ–ø–∏—Ç–æ–º–Ω–∏–∫ (—Å. –ü–ª–æ–¥–æ–ø–∏—Ç–æ–º–Ω–∏–∫, —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 1)', callback_data='lib_plodop'))
        if lib == '–î–µ—Ç—Å–∫–∞—è–∏–º.–ü.–ö–æ–º–∞—Ä–æ–≤–∞':
            mrkp.add(types.InlineKeyboardButton('–∏–º. –ö–æ–º–∞—Ä–æ–≤–∞ (—É–ª. –õ–∞–∑–æ, 42)', callback_data='lib_komarova'))
        if lib == '–ë–∞–≥—É–ª—å–Ω–∏–∫':
            mrkp.add(types.InlineKeyboardButton('–ë–∞–≥—É–ª—å–Ω–∏–∫ (–ø. –ú–æ—Ö–æ–≤–∞—è –ü–∞–¥—å, –õ-2)', callback_data='lib_baguln'))
        if lib == '–î–æ–º—Å–µ–º—å–∏':
            mrkp.add(types.InlineKeyboardButton('–î–æ–º –°–µ–º—å–∏ (–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è, 157)', callback_data='lib_domsem'))
        if lib == '–°–∞–¥–æ–≤–æ–µ':
            mrkp.add(types.InlineKeyboardButton('–°–∞–¥–æ–≤–æ–µ (—Å. –°–∞–¥–æ–≤–æ–µ, —É–ª. –Æ–±–∏–ª–µ–π–Ω–∞—è,13)', callback_data='lib_sadovoe'))
        if lib == '–ë–µ–ª–æ–≥–æ—Ä—å–µ':
            mrkp.add(types.InlineKeyboardButton('–ë–µ–ª–æ–≥–æ—Ä—å–µ (—Å. –ë–µ–ª–æ–≥–æ—Ä—å–µ, —É–ª. –†–µ–ª–æ—á–Ω–∞—è, 22)', callback_data='lib_belogor'))
        if lib == '–î–Æ–ë–∏–º–ê.–ß–µ—Ö–æ–≤–∞':
            mrkp.add(types.InlineKeyboardButton('–∏–º. –ß–µ—Ö–æ–≤–∞ (–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è 3)', callback_data='lib_chehova'))
        if lib == '–∏–º.–ë.–ú–∞—à—É–∫–∞–î–µ—Ç—Å–∫–æ–µ–æ—Ç–¥–µ–ª–µ–Ω–∏–µ':
            mrkp.add(types.InlineKeyboardButton('–∏–º. –ë. –ú–∞—à—É–∫–∞ (–ò–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∞—è, 10/1)', callback_data='lib_mashuk'))
    mrkp.add(types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data='back_to_list'))
    return mrkp

#####################################################################
# Create request lib_btn handlers

@bot.callback_query_handler(lambda click: click.data[:4] == 'lib_')
def lib(click):
    lib_name = ''
    if click.data[5:] == 'sadovoe':
        lib_name = '—Å–∞–¥–æ–≤–æ–µ'
    if click.data[5:] == 'mashuk':
        lib_name = '–º–∞—à—É–∫–∞'
    if click.data[5:] == 'chehova':
        lib_name = '—á–µ—Ö–æ–≤–∞'
    if click.data[5:] == 'belogor':
        lib_name = '–±–µ–ª–æ–≥–æ—Ä—å–µ'
    if click.data[5:] == 'domsem':
        lib_name = '–¥–æ–º —Å–µ–º—å–∏'
    if click.data[5:] == 'm_pad':
        lib_name = '–º–æ—Ö–æ–≤–∞—è'
    if click.data[5:] == 'baguln':
        lib_name = '–±–∞–≥—É–ª—å–Ω–∏–∫'
    if click.data[5:] == 'komarova':
        lib_name = '–∫–æ–º–∞—Ä–æ–≤–∞'
    if click.data[5:] == 'plodop':
        lib_name = '–ø–ª–æ–¥–æ–ø–∏—Ç–æ–º–Ω–∏–∫'
    if click.data[5:] == 'sun':
        lib_name = '—Å–æ–ª–Ω–µ—á–Ω–∞—è'
    if click.data[5:] == 'dialog':
        lib_name = '–¥–∏–∞–ª–æ–≥'
    if click.data[5:] == 'central':
        lib_name = '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è'
    if click.data[5:] == 'mashuk':
        lib_name = '–º–∞—à—É–∫–∞'
    
    global BOOK_NAME
    db = db_worker(config.db_path)
    db.add_request(click.from_user.id, BOOK_NAME, lib_name)
    print(*db.get_all_requests(), sep = '\n\n')
    db.close()

    # send_real_time_req()

    mrkp = types.InlineKeyboardMarkup()
    mrkp.add(types.InlineKeyboardButton('–Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',callback_data='back_to_list'))
    bot.edit_message_text('–∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–ª–µ–Ω, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É –≤–≤–µ–¥–∏—Ç–µ /find_book', 
                            click.from_user.id, click.message.message_id, reply_markup=mrkp)




#####################################################################

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, msg.start_message)

#####################################################################
# BOOK FINDING

@bot.message_handler(commands=['find_book'])
def start_book_find(message):
    bot.send_message(message.chat.id, msg.book_name,
                     parse_mode='markdown')
    statesdb.set(str(message.chat.id), 'ENTER_BOOK_NAME')

# —Ç—É—Ç –≥–¥–µ-—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –¥–æ–±–∞–≤–∏—Ç—å

@bot.message_handler(func=lambda message: statesdb.get(str(message.chat.id)) == "ENTER_BOOK_NAME")
def search_book(message):
    bot.send_message(message.chat.id, msg.please_wait)
    # bot.send_animation(message.chat.id, msg.wait_gif_url)
    global scr
    if not isinstance(scr, str):
        scr.close() 
    scr = Scrapper(config.BookFindServiceUrl_alt)                                    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    books = scr.find_books(message.text)

    if books:
        books = [b.to_str() for b in books]

        global pgt
        if not isinstance(pgt, str):
            pgt.clear_data()
        pgt = Paginator(books, final_tip=msg.books_list_req_tip, split=3)
        mess, mrkp = pgt.make_first_page()
        bot.send_message(message.chat.id, mess, reply_markup=mrkp)
        
        statesdb.set(str(message.chat.id), 'PAGINATOR_ACTIVE')
    else:
        bot.send_message(message.chat.id, msg.not_found)



# FOR PAGINATION
@bot.callback_query_handler(lambda click: click.data == 'next' or click.data == 'previous')
def pagin_btns(click):
    global pgt
    global scr
    if click.data == 'next':
        books = scr.find_next()
        if len(books) != 0:
            add_books = [b.to_str() for b in books]
            pgt.add_to_data(add_books)
        mess, mrkp = pgt.make_next_page()
        bot.edit_message_text(mess, message_id=click.message.message_id,
                              reply_markup=mrkp, chat_id=click.from_user.id)
    elif click.data == 'previous':
        mess, mrkp = pgt.make_previous_page()
        bot.edit_message_text(mess, message_id=click.message.message_id,
                              reply_markup=mrkp, chat_id=click.from_user.id)

libs = None
BOOK_NAME = None
@bot.callback_query_handler(lambda click: click.data[:4] == 'item')
def pagin_one_i(click):    
    global pgt         
    mess, mrkp = pgt.make_one(int(click.data[4])-1, ['–Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', '–∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ'], ['back_to_list', 'check_available'])
    bot.edit_message_text(mess, message_id=click.message.message_id,
                            reply_markup=mrkp, chat_id=click.from_user.id)
    global libs
    libs = mess[mess.index('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏:') + 12:]
    global BOOK_NAME
    BOOK_NAME = mess[:mess.index('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏:')]

@bot.callback_query_handler(lambda click: click.data == 'check_available')
def check_avail(click): 
    msg = '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É:'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    global libs
    libs = [l for l in libs.split('üî∏')]
    markup = create_libraries_markup_from_list(libs)
    bot.edit_message_text(msg, message_id=click.message.message_id,
                            reply_markup=markup, chat_id=click.from_user.id)

@bot.callback_query_handler(func=lambda click: click.data == 'back_to_list')
def back_to_list(click):
    global pgt
    mess, mrkp = pgt.make_first_page()
    bot.edit_message_text(mess, message_id=click.message.message_id,
                          reply_markup=mrkp, chat_id=click.from_user.id)

############################################################################################################
# EVENTS

@bot.message_handler(commands=['events'])
def events(message):
    bot.send_message(message.chat.id, msg.start_message)

############################################################################################################
# RUN

if __name__ == "__main__":
    bot.polling(none_stop=True)



def send_response_to_reader(chat_id, response, req_id):
    '''–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –ø–æ –ø–æ–≤–æ–¥—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
    –∫–Ω–∏–≥–∞: 
    –±–∏–±–ª–∏–æ—Ç–µ–∫–∞:
    
    —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:'''
    pass

